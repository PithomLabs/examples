######################################################
# rest-api-generic-auth - Application Security Configuration
#
# Complete routes configuration reference:
#   https://docs.aahframework.org/security-config.html
######################################################

security {
  # -------------------------------------------------------
  # Authentication & Authorization configuration
  # Doc: https://docs.aahframework.org/security-design.html
  # -------------------------------------------------------
  auth_schemes {
    # Generic Auth Scheme
    # It is custom defined name, this is used in the routes `auth` attribute.
    generic_auth {
      # Auth scheme name.
      # Currently supported values are `form`, `basic` and `generic`.
      # It is required value, no default.
      scheme = "generic"

      # Framework calls `Authenticator` to get the Subject's authentication
      # information. The credential validation is not done by framework, it is
      # left interface implementation.
      # It is required value, no default.
      authenticator = "security/AuthenticationProvider"

      # Framework calls `Authorizer` to get Subject's authorization information,
      # such as Roles and Permissions. Then it populates the Subject instance.
      # It is required value, no default.
      authorizer = "security/AuthorizationProvider"

      # Header names are used to extract `AuthenticationToken` from request.
      header {
        # Default value is 'Authorization'
        #identity = "Authorization"

        # Optional credential header
        # Typically it's not used, however in the industry people do use it
        # Default value is empty string
        #credential = "X-AuthPass"
      }
    }
  }

  # -----------------------------------------------------------------------
  # Session configuration
  # HTTP state management across multiple requests.
  # Doc: https://docs.aahframework.org/security-config.html#section-session
  # -----------------------------------------------------------------------
  session {

  }
}
