######################################################
# form-based-auth - Application Security Configuration
#
# Complete routes configuration reference:
#   https://docs.aahframework.org/security-config.html
######################################################

security {
  auth_schemes {
    # HTTP Form Auth Scheme
    # It is custom defined name, this is used in the routes `auth` attribute.
    form_auth {
      # Auth scheme name.
      # Supported values are `form`, `basic` and `api`.
      # It is required value, no default.
      scheme = "form"

      # Framework calls `Authenticator` to get the Subject's authentication
      # information. Then framework validates the credential using password
      # encoder.
      # It is required value, no default.
      authenticator = "security/FormAuthenticationProvider"

      # Framework calls `Authorizer` to get Subject's authorization information,
      # such as Roles, Permissions. Then it populates the Subject instance.
      # It is required value, no default.
      authorizer = "security/FormAuthorizationProvider"

      # Password encoder is used to encode the given credential and then compares
      # it with application provide credential.
      # Currently supported hashing is `bcrypt`, additional hash types (upcoming).
      password_encoder {
        # Default value is `bcrypt`.
        #type = "bcrypt"
      }

      # Field names are used to extract `AuthenticationToken` from request.
      field {
        # Default value is `username`
        identity = "email"

        # Default value is `password`
        #credential = "password"
      }

      # URLs is used when appropriate.
      url {
        # Login page URL, implement your login and configure here.
        # Default value is `/login.html`.
        #login = "/login.html"

        # Login submit URL, used to submit login credential for authentication.
        # Basically login form submits its values to this URL as POST request.
        # Default value is `/login`.
        #login_submit = "/login"

        # Login failure, any failure during authentication process. Framework
        # sends user to this URL and logs detailed information in the log.
        #login_failure = "/login.html?error=true"

        # Default page URL after the successful authentication. By default framework
        # redirects the user to requested page after authentication. Otherwise it
        # sends to this URL.
        # Default value is `/`.
        #default_target = "/"

        # Always redirect to default URL, regardless of the request page.
        # Default value is `false`.
        #always_to_default = false
      }
    }

  }

  # -----------------------------------------------------------------------
  # Session configuration
  # HTTP state management across multiple requests.
  # Doc: https://docs.aahframework.org/security-config.html#section-session
  # -----------------------------------------------------------------------
  session {
    # Session mode to choose whether HTTP session should be persisted or
    # destroyed at the end of the request. Supported values are `stateless`
    # and `stateful`.
    # Default value is `stateless` for API and `stateful` for Web app.
    mode = "stateful"

    # Session store is to choose where session value should be persisted.
    store {
      # Currently aah framework supports `cookie` and `file` as store type.
      # Also framework provide extensible `session.Storer` interface to
      # add custom session store.
      # Default value is `cookie`.
      type = "cookie"


    }

    # Session ID length
    # Default value is `32`.
    #id_length = 32

    # Time-to-live for session data. Valid time units are "m = minutes",
    # "h = hours" and 0.
    # Default value is `0`, cookie is deleted when the browser is closed.
    #ttl = "0"

    # Session cookie name prefix.
    # Default value is `aah` For e.g.: `aah_session`
    #prefix = "aah"

    # Default value is `empty` string.
    #domain = ""

    # Default value is `/`.
    #path = "/"

    # HTTP session cookie HTTPOnly value. This option prevents XSS
    # (Cross Site Scripting) attacks.
    # Default value is `true`.
    #http_only = true

    # HTTP session cookie secure value.
    # However if aah server is not configured with SSL then
    # framework sets this value as false
    # Default value is `true`.
    #secure = true

    # HTTP session cookie value signing using `HMAC`. For server farm this
    # should be same in all instance. For HMAC sign & verify it recommend to use
    # key size is `32` or `64` bytes.
    # Default value is `64` bytes (generated when application gets created
    # using `aah new` command).
    sign_key = "408eb2f79f32d53971a83e6dc979581dbe44a6e9ef4f5da25574e9a9ec81a353"

    # HTTP session cookie value encryption and decryption using `AES`. For server
    # farm this should be same in all instance. AES algorithm is used, valid
    # lengths are `16`, `24`, or `32` bytes to select `AES-128`, `AES-192`, or `AES-256`.
    # Default value is `32` bytes (generated when application gets created
    # using `aah new` command).
    enc_key = "62e3286e3a2c0d053cbd964e9a23b1d1"

    # Cleanup Interval is used to clean the expired session objects from store.
    # This is only applicable for non-cookie store type.
    # Cleanup performed in dedicated goroutine. Valid time units are
    # `m -> minutes`, `h -> hours`.
    # Default value is `30m`.
    #cleanup_interval = "30m"
  }
}
