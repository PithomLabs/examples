# ---------------------------------------------------------------------------
# oauth2-social-login - Application Security Configuration
#
# Complete routes configuration reference:
# Doc: https://docs.aahframework.org/security-config.html
# ---------------------------------------------------------------------------

security {
  # -------------------------------------------------------
  # Authentication & Authorization configuration
  #
  # Doc: https://docs.aahframework.org/security-design.html
  # -------------------------------------------------------
  auth_schemes {
    # -----------------------------------------------------------------------------
    # OAuth2 auth scheme
    # Doc: https://docs.aahframework.org/auth-schemes/oauth2.html
    # -----------------------------------------------------------------------------
    facebook_auth {
      scheme = "oauth2"
      principal = "security/facebook/SubjectPrincipalProvider"
      authorizer = "security/AuthorizationProvider"

      client {
        id = ""
        secret = ""
        scopes = ["email"]
        provider {
          name = "facebook"
        }
      }

      url {
        success = "/success.html"
      }
    }

    # -----------------------------------------------------------------------------
    # OAuth2 auth scheme
    # Doc: https://docs.aahframework.org/auth-schemes/oauth2.html
    # -----------------------------------------------------------------------------
    google_auth {
      scheme = "oauth2"
      principal = "security/google/SubjectPrincipalProvider"
      authorizer = "security/AuthorizationProvider"

      client {
        id = ""
        secret = ""
        scopes = ["profile", "email"]
        provider {
          name = "google"
        }
      }

      url {
        success = "/success.html"
      }
    }

    # -----------------------------------------------------------------------------
    # OAuth2 auth scheme
    # Doc: https://docs.aahframework.org/auth-schemes/oauth2.html
    # -----------------------------------------------------------------------------
    github_auth {
      scheme = "oauth2"
      principal = "security/github/SubjectPrincipalProvider"
      authorizer = "security/AuthorizationProvider"

      client {
        id = ""
        secret = ""
        provider {
          name = "github"
        }
      }

      url {
        success = "/success.html"
      }
    }
  }

  # -----------------------------------------------------------------------
  # Session configuration
  # HTTP state management across multiple requests.
  #
  # Doc: https://docs.aahframework.org/security-config.html#section-session
  # -----------------------------------------------------------------------
  session {
    # Session mode to choose whether HTTP session should be persisted or
    # destroyed at the end of the request. Supported values are `stateless`
    # and `stateful`.
    # Default value is `stateless` for API and `stateful` for Web app.
    mode = "stateful"

    # Session store is to choose where session value should be persisted.
    store {
      # Currently aah framework supports `cookie` and `file` as store type.
      # Also framework provide extensible `session.Storer` interface to
      # add custom session store.
      # Default value is `cookie`.
      type = "cookie"
    }

    # Session cookie name prefix.
    # Default value is `aah_<app-name>` For e.g.: `aah_myapp_session`
    prefix = "aah_oauth2-social-login"

    # HTTP session cookie value signing using `HMAC`. For server farm this
    # should be same in all instance. For HMAC sign & verify it recommend to use
    # key size is `32` or `64` bytes.
    # Default value is `64` bytes (`aah new` generates strong one).
    sign_key = "9150b9f5d55808efee39ca3746d92ac742716849ab7bdb1541b50e8e9599fafe"

    # HTTP session cookie value encryption and decryption using `AES`. For server
    # farm this should be same in all instance. AES algorithm is used, valid
    # lengths are `16`, `24`, or `32` bytes to select `AES-128`, `AES-192`, or `AES-256`.
    # Default value is `32` bytes (`aah new` generates strong one).
    enc_key = "4fb307ca1156e5d1eae5f91a137ad0f7"
  }


  # ------------------------------------------------------------
  # Anti-CSRF Protection
  #
  # Doc: https://docs.aahframework.org/anti-csrf-protection.html
  # ------------------------------------------------------------
  anti_csrf {
    # Anti-CSRF cookie value signing using `HMAC`. For server farm this
    # should be same in all instance. For HMAC sign & verify it recommend to use
    # key size is `32` or `64` bytes.
    # Default value is `64` bytes (`aah new` generates strong one).
    sign_key = "2391218e1c2e5afae88a7a8314c2597e6633b802f8f856d70ed210728679aa5a"

    # Anti-CSRF cookie value encryption and decryption using `AES`. For server
    # farm this should be same in all instance. AES algorithm is used, valid
    # lengths are `16`, `24`, or `32` bytes to select `AES-128`, `AES-192`, or `AES-256`.
    # Default value is `32` bytes (`aah new` generates strong one).
    enc_key = "3ea3295db2f7900a778f0ade4ee16867"
  }

  # ---------------------------------------------------------------------------
  # HTTP Secure Header(s)
  # Application security headers with many safe defaults.
  # Doc: https://docs.aahframework.org/security-config.html#section-http-header
  #
  # Tip: Quick way to verify secure headers - https://securityheaders.io
  # ---------------------------------------------------------------------------
  http_header {
    # Enabling HTTP secure headers.
    # Default value is `true`.
    enable = true

    # Content-Security-Policy (CSP)
    # Provides a rich set of policy directives that enable fairly granular control
    # over the resources that a page is allowed. Prevents XSS risks.
    #
    # Learn more:
    #   https://content-security-policy.com/
    #   https://developers.google.com/web/fundamentals/security/csp/
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#csp
    #
    # Read above references and define app policy.
    #
    # Note: It is highly recommended to verify policy directives in report
    # only mode before enabling this header. Since its highly controls how
    # page is rendered.
    #
    # No default values, you have to provide it.
    csp {
      # Set of directives to govern the resources load on a page.
      #directives = ""

      # By default, violation reports aren't sent. To enable violation reporting,
      # you need to specify the report-uri policy directive.
      report_uri = ""

      # By default aah puts `Content-Security-Policy` in report only mode,
      # so that could be verified before making it live mode
      # (set `csp_report_only` to false).
      #
      # Don't forget to set the `report-uri` for validation.
      report_only = true
    }

    # Public-Key-Pins PKP (aka HPKP)
    # This header prevents the Man-in-the-Middle Attack (MITM) with forged certificates.
    #
    # Learn more:
    #   https://scotthelme.co.uk/hpkp-http-public-key-pinning/
    #   https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning
    # Read above references and define app keys.
    #
    # Note:
    #   - HPKP has the potential to lock out users for a long time if used incorrectly!
    #     The use of backup certificates and/or pinning the CA certificate is recommended.
    #   - It is highly recommended to verify app PKP in report only mode before enabling this header.
    #
    # No default values, aah user have to provide it.
    pkp {
      # The Base64 encoded Subject Public Key Information (SPKI) fingerprint.
      # These values gets added as `pin-sha256=<key1>; ...`.
      #keys = [
      #"X3pGTSOuJeEVw989IJ/cEtXUEmy52zs1TZQrU06KUKg=",
      #"MHJYVThihUrJcxW6wcqyOISTXIsInsdj3xK8QrZbHec="
      #]

      # The time that the browser should remember that this site is only to be
      # accessed using one of the defined keys.
      # Valid time units are "s -> seconds", "m -> minutes", "h - hours".
      max_age = "720h"

      # If enabled the PKP keys applies to all of the site's subdomains as well.
      # Default value is `false`.
      include_subdomains = false

      # By default, Pin validation failure reports aren't sent. To enable Pin validation
      # failure reporting, you need to specify the report-uri.
      report_uri = ""

      # By default aah puts `Public-Key-Pins` in report only mode, so that it
      # could be verified before making it live (set `pkp_report_only` to false).
      #
      # Don't forget to set the `report-uri` for validation.
      report_only = true
    }
  }
}
